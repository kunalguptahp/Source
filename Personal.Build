<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Personal Build" default="Build" basedir="..\Build" >

  

  
 
  <property name="Compile.ConfigName" value="Debug"/>
  
  <include buildfile="Common.Build.xml" />

  <description>Begin Package Includes</description>
  <include buildfile="${PackagesDirectory}\Deployment\Deployment.Target.xml" if="${file::exists(PackagesDirectory + '\Deployment\Deployment.Target.xml')}"/>
  <include buildfile="${PackagesDirectory}\Workspace\Workspace.Targets.xml" if="${file::exists(PackagesDirectory + '\Workspace\Workspace.Targets.xml')}"/>
  
  <fileset id="PacakgeFinder" />
  <loopthrough property="PackageType">
    <items>
      <strings>
        <string value="SourceControl" />
        <string value="Compile" />
        <string value="UnitTest" />
      </strings>
    </items>
    <do>
      <property name="PackagePathPattern" value="${PackagesDirectory}\**\${PackageType}.Target.xml"/>
      <function execute="${fileset::include-add('PacakgeFinder', PackagePathPattern)}"/>
      <echo message="${fileset::file-count('PacakgeFinder')} files found in pattern '${PackagePathPattern}'."/>
      <if test="${fileset::file-count('PacakgeFinder') > 0}">
        <property name="PackagePath" value="${fileset::get-name-at-index('PacakgeFinder', 0)}"/>
        <include buildfile="${PackagePath}"/>
      </if>
      <function execute="${fileset::include-remove('PacakgeFinder', PackagePathPattern)}"/>
    </do>
  </loopthrough>

  <property name="Ant.Included" value="false"/>
  <if test="${file::exists(PackagesDirectory + '\Ant\Ant.Target.xml')}" >
    <include buildfile="${PackagesDirectory}\Ant\Ant.Target.xml" />
    <property name="Ant.Included" value="true"/>
  </if>
  <description>End Package Includes</description>

  <target name="CreateCommandPrompt">
    <if test="${Ant.Included}">
      <setenv>
        <environment refid="${Ant.Environment.RefId}" />
      </setenv>
    </if>
    <setenv>
      <environment refid="${Compile.Environment.RefId}" />
    </setenv>

    <asyncexec createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" program="cmd" workingdir="${ProductDirectory}" />
  </target>
  
  <target name="Build">
    <call target="Workspace.CheckForRequieredSoftware" if="${target::exists('Workspace.CheckForRequieredSoftware')}"/>
    <call target="Workspace.ConfigureEnvironment" if="${target::exists('Workspace.ConfigureEnvironment')}"/>
    <call target="Compile"/>
    <call target="Test" if="${target::exists('Test')}"/>
  </target>

  <target name="Rebuild">
    <call target="Workspace.CheckForRequieredSoftware"/>
    <call target="Workspace.ConfigureEnvironment"/>
    <call target="Recompile"/>
    <call target="Test"/>
  </target>

  <target name="UpdateSource">
    <property name="SourceControl.Update.FileTimeStamp" value="Current"/>
    <property name="SourceControl.Update.ReplaceWritableFiles" value="False"/>
    <property name="SourceControl.Update.MakeWritable" value="False"/>
		<property name="SourceControl.Update.Interactive" value="True"/>
    <call target="SourceControl.GetOfCodeLineDirectory"/>
  </target>

  <target name="Compile">
    <if test="${Ant.Included}">
      <call target="Ant.Build"/>
    </if>
    <fileset id="InfoFiles">
      <include name="${ProductDirectory}\ProjectInfo.*"/>
      <include name="${ProductDirectory}\**\AssemblyInfo.*"/>
    </fileset>
    <trycatch>
      <try>
        <call target="Compile.SetUp"/>

        <attrib readonly="false">
          <fileset refid="InfoFiles" />
        </attrib>
        <touch millis="1">
          <fileset refid="InfoFiles" />
        </touch>
        <attrib readonly="true">
          <fileset refid="InfoFiles" />
        </attrib>

        <property name="Compile.ToCopyToBin" value="false"  />
        <property name="Compile.ToDeployZip" value="false"  />
        <property name="Compile.PublishLogFile" value="false" />
        <call target="Compile.CompileSource" />
      </try>
      <catch property="ExceptionMessage">
        <call target="Compile.ShowReport"/>
        
        <fail message="${ExceptionMessage}"/>
      </catch>
      <finally>
        <call target="Compile.TearDown"/>
      </finally>
    </trycatch>
  </target>

  <target name="Recompile">
    <fileset id="ProjectFiles">
      <include name="${ProductDirectory}\**\*.*proj"/>
    </fileset>
    <foreach item="File" property="ProjectFile.Path">
      <in>
        <items refid="ProjectFiles" />
      </in>
      <do>
        <echo message="******************************************************"/>
        <echo message="Cleaning ${ProjectFile.Path}"/>

        <property name="Obj.Path" value="${path::get-directory-name(ProjectFile.Path)}\obj"/>
        <delete dir="${Obj.Path}" if="${directory::exists(Obj.Path)}" verbose="true" />

        <property name="Output.Path" value="${vsproject::get-output-directory(ProjectFile.Path, Compile.ConfigName)}"/>
        <if test="${Output.Path != '' and directory::exists(Output.Path) and string::starts-with(Output.Path, ProductDirectory)}">
          <delete verbose="true">
            <fileset basedir="${Output.Path}">
              <include name="**\*"/>
              <exclude name="**\*.vshost.exe"/>
            </fileset>
          </delete>
        </if>
      </do>
    </foreach>
    <call target="Compile"/>
  </target>

  <target name="Test">
    <trycatch>
      <try>
        <call target="UnitTest.SetUp"/>

        <call target="UnitTest.RunTests"/>
      </try>
      <catch property="ExceptionMessage">
        <call target="UnitTest.ShowReport"/>

        <fail message="${ExceptionMessage}"/>
      </catch>
      <finally>
        <call target="UnitTest.TearDown"/>
      </finally>
    </trycatch>
  </target>

  <target name="Ant.Build">
    <trycatch>
      <try>
        <call target="Ant.SetUp"/>
        <call target="Ant.CompileSource" />
      </try>
      <catch property="ExceptionMessage">
        <property name="Common.ShowReport.XmlFile" value="${AntBuildLogFile}"/>
        <property name="Common.ShowReport.HtmlFile" value="${BuildDirectory}\AntLogs\AntReport.html"/>
        <property name="Common.ShowReport.XslFile" value="${BuildDirectory}\Packages\Ant\AntReport.xsl"/>
        <property name="Common.ShowReport.DetailsFilePath" value=""/>
        <call target="Common.ShowReport"/>

        <fail message="${ExceptionMessage}"/>
      </catch>
      <finally>
        <call target="Ant.TearDown"/>
      </finally>
    </trycatch>
  </target>
</project>